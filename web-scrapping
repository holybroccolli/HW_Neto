{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c2030d12",
   "metadata": {},
   "source": [
    "Необходимо написать функцию, которая будет основана на поиске по сайту habr.com. Функция в качестве параметра должна принимать список запросов для поиска (например, ['python', 'анализ данных']) и на основе материалов, попавших в результаты поиска по каждому запросу, возвращать датафрейм вида:\n",
    "\n",
    "<дата> - <заголовок> - <ссылка на материал> В рамках задания предполагается работа только с одной (первой) страницей результатов поисковой выдачи для каждого запроса. Материалы в датафрейме не должны дублироваться, если они попадали в результаты поиска для нескольких запросов из списка."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d664c49f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "from bs4 import BeautifulSoup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5bccc5d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "URL = 'https://habr.com/ru/search/'\n",
    "params = {\n",
    "    'q': 'python',\n",
    "    # 'q': 'data scientist'\n",
    "}\n",
    "req = requests.get(URL, params=params)\n",
    "# req.status_code\n",
    "soup = BeautifulSoup(req.text)\n",
    "posts = soup.find_all('article', class_='tm-articles-list__item')\n",
    "len(posts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57eb31ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "soup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec17c76a",
   "metadata": {},
   "outputs": [],
   "source": [
    "posts[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f53ed5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "def get_habr_article(query):\n",
    "  habr_article = pd.DataFrame()\n",
    "  URL = 'https://habr.com/ru/search/'\n",
    "  for q in query:\n",
    "    params = {\n",
    "             'q': q\n",
    "           }\n",
    "    req = requests.get(URL, params=params)\n",
    "    time.sleep(0.3)\n",
    "    soup = BeautifulSoup(req.text)\n",
    "    articles = soup.find_all('div', class_ = 'tm-article-snippet')\n",
    "    for article in articles:\n",
    "      date = article.select_one('time').get('title').split(',')[0]\n",
    "      title = article.select_one('a.tm-title__link')\n",
    "      if title != None:\n",
    "        title = title.text\n",
    "      link = article.select_one('a.tm-title__link')\n",
    "      if link != None:\n",
    "        link = link.get('href')\n",
    "      else: \n",
    "        link = ''\n",
    "      row = {'date': date, 'title': title,  'link': 'https://habr.com' + link}\n",
    "      habr_article = pd.concat([habr_article, pd.DataFrame([row])])\n",
    "  return habr_article.reset_index(drop=True).drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e25307c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "get_habr_article(['python'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9e31657",
   "metadata": {},
   "source": [
    "Функция из предыдущей части задания должна быть расширена следующим образом:\n",
    "\n",
    "кроме списка ключевых слов для поиска необходимо объявить параметр с количеством страниц поисковой выдачи. Т.е. при передаче в функцию аргумента 4 необходимо получить материалы с первых 4 страниц результатов; в датафрейме должны быть столбцы с полным текстом найденных материалов и количеством лайков: <дата> - <заголовок> - <ссылка на материал> - <текст материала> - <количество лайков>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81ea544d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "from bs4 import BeautifulSoup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "655f454a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_entire_text(url_article):\n",
    "    \"\"\"\n",
    "    DOCSTRING: Получение полного текста статьи по ссылке со страницы поиска \n",
    "    INPUT: 'https://habr.com' + href\n",
    "    OUTPUT: \n",
    "    \"\"\"\n",
    "    reqs = requests.get(url_article)\n",
    "    soups = BeautifulSoup(reqs.text)\n",
    "    return soups.find('div', class_='article-formatted-body')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2d6dee7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "def get_habr_search(query, page_number):\n",
    "  \"\"\"\n",
    "  DOCSTRING: Получение дата-фрейма с новостями со страницы поиска в формате:\n",
    "  <Дата - Название - Link - Likes - Полный текст>\n",
    "  INPUT: список запросов, номер страницы (20 новостей на странице)\n",
    "  OUTPUT: дата-фрейм\n",
    "  \"\"\"\n",
    "  habr_article = pd.DataFrame()\n",
    "  URL = 'https://habr.com/ru/search/' + 'page' + str(page_number) + '/'\n",
    "  for q in query:\n",
    "    params = {\n",
    "            'q': q\n",
    "          }\n",
    "    req = requests.get(URL, params=params)\n",
    "    time.sleep(0.3)\n",
    "    soup = BeautifulSoup(req.text)\n",
    "    articles = soup.find_all('article', class_='tm-articles-list__item')\n",
    "    for article in articles:\n",
    "      date = article.select_one('time').get('title').split(',')[0]\n",
    "      title = article.select_one('a.tm-title__link')\n",
    "      if title != None:\n",
    "        title = title.text\n",
    "      link = article.select_one('a.tm-title__link')\n",
    "      if link != None:\n",
    "        link = link.get('href')\n",
    "      else: \n",
    "        link = ''\n",
    "      likes = article.select_one('.tm-votes-meter__value').text\n",
    "      contain_text = get_entire_text('https://habr.com' + link)\n",
    "      if contain_text != None:\n",
    "        contain_text = contain_text.text.strip().replace('\\xa0', '').replace('\\n', '').replace('\\r', ' ')\n",
    "      row = {'date': date, 'title': title,  'link': 'https://habr.com' + link, 'likes': likes, 'contain_text': contain_text}\n",
    "      habr_article = pd.concat([habr_article, pd.DataFrame([row])])\n",
    "  return habr_article.reset_index(drop = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc199bf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "get_habr_search(['SDSJ'], 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7272c1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "# df = get_multipage_search(['data scientist', 'data scientist', 'python'], 4)\n",
    "# df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "178e5176",
   "metadata": {},
   "source": [
    "Обработка статей с другой разметкой - Megaposts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcf402cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# MEGAPOST\n",
    "# https://habr.com/ru/specials/344806/\n",
    "\n",
    "\n",
    "# дата   ОК\n",
    "\n",
    "# титл \n",
    "# <h2 class=\"tm-megapost-snippet__title\">Новый подход к спортивному анализу данных: какие шаблоны «рвет» <em class=\"searched-item\">SDSJ</em></h2>\n",
    "\n",
    "# href\n",
    "\n",
    "# <a href=\"/ru/specials/344806/\" class=\"tm-megapost-snippet__link tm-megapost-snippet__date\"><time datetime=\"2017-12-25T12:07:04.000Z\" title=\"2017-12-25, 15:07\" class=\"tm-megapost-snippet__datetime-published\">25  декабря  2017</time></a>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd26ca45",
   "metadata": {},
   "outputs": [],
   "source": [
    "habr_article = pd.DataFrame()\n",
    "URL = 'https://habr.com/ru/search/'\n",
    "params = {\n",
    "         'q': 'SDSJ'\n",
    "         }\n",
    "req = requests.get(URL, params=params)\n",
    "time.sleep(0.3)\n",
    "soup = BeautifulSoup(req.text)\n",
    "soup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56f1c5f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "articles = soup.find_all('article', class_ = 'tm-articles-list__item')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6f82893",
   "metadata": {},
   "outputs": [],
   "source": [
    "len(articles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "275cfe77",
   "metadata": {},
   "outputs": [],
   "source": [
    "articles[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c945727",
   "metadata": {},
   "outputs": [],
   "source": [
    "for article in articles:\n",
    "  date = article.select_one('time').get('title').split(',')[0]\n",
    "  # title = article.select_one('a.tm-title__link').text\n",
    "  title = article.select_one('h2')\n",
    "  if title != None:\n",
    "    title = title.text\n",
    "  link = article.select_one('a.tm-megapost-snippet__link')\n",
    "  if link != None:\n",
    "    link = link.get('href')\n",
    "  else:\n",
    "    link = ''  \n",
    "  likes = article.select_one('.tm-votes-meter__value').text\n",
    "  contain_text = get_entire_text('https://habr.com' + link)\n",
    "  if contain_text != None:\n",
    "    contain_text = contain_text.text.strip().replace('\\xa0', '').replace('\\n', '').replace('\\r', ' ')\n",
    "  row = {'date': date, 'title': title,  'link': 'https://habr.com' + link, 'likes': likes, 'contain_text': contain_text}\n",
    "  habr_article = pd.concat([habr_article, pd.DataFrame([row])])\n",
    "habr_article"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
